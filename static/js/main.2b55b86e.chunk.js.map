{"version":3,"sources":["mockTimeZones/mockTimeZones.tsx","Componenets/SelectorCountry.tsx","Componenets/App/App.tsx","index.tsx"],"names":["mockData","value","timeZone","SelectorCountry","selectTimeZone","classes","makeStyles","theme","createStyles","formControl","margin","spacing","minWidth","selectEmpty","marginTop","useStyles","useState","country","setCountry","FormControl","className","InputLabel","id","Select","onChange","event","target","map","item","index","MenuItem","onClick","App","timeIn12Format","timeFormat","setTimeFormat","timeZoneName","setTimeZoneName","format","interval","tz","Button","variant","color","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAmIeA,EAjImB,CAChC,CACEC,MAAO,SACPC,SAAU,UAEZ,CACED,MAAO,QACPC,SAAU,SAEZ,CACED,MAAO,SACPC,SAAU,oBAEZ,CACED,MAAO,YACPC,SAAU,uBAEZ,CACED,MAAO,SACPC,SAAU,mBAEZ,CACED,MAAO,QACPC,SAAU,cAEZ,CACED,MAAO,YACPC,SAAU,kBAEZ,CACED,MAAO,QACPC,SAAU,cAEZ,CACED,MAAO,YACPC,SAAU,kBAEZ,CACED,MAAO,WACPC,SAAU,oBAEZ,CACED,MAAO,UACPC,SAAU,mBAEZ,CACED,MAAO,SACPC,SAAU,iBAEZ,CACED,MAAO,OACPC,SAAU,eAEZ,CACED,MAAO,WACPC,SAAU,mBAEZ,CACED,MAAO,SACPC,SAAU,iBAEZ,CACED,MAAO,SACPC,SAAU,iBAEZ,CACED,MAAO,SACPC,SAAU,iBAEZ,CACED,MAAO,SACPC,SAAU,UAEZ,CACED,MAAO,WACPC,SAAU,YAEZ,CACED,MAAO,QACPC,SAAU,SAGZ,CACED,MAAO,WACPC,SAAU,mBAEZ,CACED,MAAO,SACPC,SAAU,iBAEZ,CACED,MAAO,UACPC,SAAU,kBAEZ,CACED,MAAO,UACPC,SAAU,mBAEZ,CACED,MAAO,cACPC,SAAU,uBAEZ,CACED,MAAO,WACPC,SAAU,oBAEZ,CACED,MAAO,SACPC,SAAU,iBAEZ,CACED,MAAO,OACPC,SAAU,eAEZ,CACED,MAAO,QACPC,SAAU,gBAEZ,CACED,MAAO,UACPC,SAAU,WAEZ,CACED,MAAO,UACPC,SAAU,Y,6DC/ECC,EAtCS,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,eAanBC,EAZYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,YAAa,CACXC,OAAQH,EAAMI,QAAQ,GACtBC,SAAU,KAEZC,YAAa,CACXC,UAAWP,EAAMI,QAAQ,QAKfI,GAbqD,EAcvCC,mBAAiB,QAdsB,mBAc9DC,EAd8D,KAcrDC,EAdqD,KAoBrE,OACE,8BACE,eAACC,EAAA,EAAD,CAAaC,UAAWf,EAAQI,YAAhC,UACE,cAACY,EAAA,EAAD,CAAYC,GAAG,2BAAf,qBACA,cAACC,EAAA,EAAD,CACED,GAAG,qBACHrB,MAAOgB,EACPO,SAXiC,SAACC,GACxCP,EAAWO,EAAMC,OAAOzB,QAOpB,SAKGD,EAAS2B,KAAI,SAACC,EAAMC,GAAP,OAAiB,cAACC,EAAA,EAAD,CAAsB7B,MAAO2B,EAAK3B,MAAO8B,QAAS,kBAAM3B,EAAewB,EAAK1B,WAA5E,SAC5B0B,EAAK3B,OADsC4B,cCczCG,EA3CH,WACV,IACMC,EAAyB,YAFf,EAIoBjB,mBAAiBiB,GAJrC,mBAITC,EAJS,KAIGC,EAJH,OAKwBnB,mBAAiB,eALzC,mBAKToB,EALS,KAKKC,EALL,KAmBhB,OACE,gCACE,oBAAIjB,UAAU,SAAd,SACE,cAAC,IAAD,CACEkB,OAAQJ,EACRK,SAAU,IACVC,GAAIJ,MAKR,uBAEA,sBAAKhB,UAAU,YAAf,UACE,cAACqB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUZ,QAAS,WAxBvDI,EADCD,IAAeD,EAPW,WAUbA,IAsBZ,gCAEA,cAAC,EAAD,CACE7B,eArBkC,SAACwB,GACzCS,EAAgBT,a,MCnBpBgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2b55b86e.chunk.js","sourcesContent":["import { ICountry } from '../interfaces/interfaces';\r\n\r\nconst mockData: Array<ICountry> = [\r\n  {\r\n    value: 'Israel',\r\n    timeZone: 'Israel'\r\n  },\r\n  {\r\n    value: 'Egypt',\r\n    timeZone: 'Egypt'\r\n  },\r\n  {\r\n    value: 'Sydney',\r\n    timeZone: 'Australia/Sydney'\r\n  },\r\n  {\r\n    value: 'Melbourne',\r\n    timeZone: 'Australia/Melbourne'\r\n  },\r\n  {\r\n    value: 'Canary',\r\n    timeZone: 'Atlantic/Canary'\r\n  },\r\n  {\r\n    value: 'Qatar',\r\n    timeZone: 'Asia/Qatar'\r\n  },\r\n  {\r\n    value: 'Singapore',\r\n    timeZone: 'Asia/Singapore'\r\n  },\r\n  {\r\n    value: 'Tokyo',\r\n    timeZone: 'Asia/Tokyo'\r\n  },\r\n  {\r\n    value: 'Jerusalem',\r\n    timeZone: 'Asia/Jerusalem'\r\n  },\r\n  {\r\n    value: 'New York',\r\n    timeZone: 'America/New_York'\r\n  },\r\n  {\r\n    value: 'Chicago',\r\n    timeZone: 'America/Chicago'\r\n  },\r\n  {\r\n    value: 'Berlin',\r\n    timeZone: 'Europe/Berlin'\r\n  },\r\n  {\r\n    value: 'Riga',\r\n    timeZone: 'Europe/Riga'\r\n  },\r\n  {\r\n    value: 'Budapest',\r\n    timeZone: 'Europe/Budapest'\r\n  },\r\n  {\r\n    value: 'Zurich',\r\n    timeZone: 'Europe/Zurich'\r\n  },\r\n  {\r\n    value: 'Moscow',\r\n    timeZone: 'Europe/Moscow'\r\n  },\r\n  {\r\n    value: 'Monaco',\r\n    timeZone: 'Europe/Monaco'\r\n  },\r\n  {\r\n    value: 'Poland',\r\n    timeZone: 'Poland'\r\n  },\r\n  {\r\n    value: 'Portugal',\r\n    timeZone: 'Portugal'\r\n  },\r\n  {\r\n    value: 'Japan',\r\n    timeZone: 'Japan'\r\n  },\r\n\r\n  {\r\n    value: 'Maldives',\r\n    timeZone: 'Indian/Maldives'\r\n  },\r\n  {\r\n    value: 'Vienna',\r\n    timeZone: 'Europe/Vienna'\r\n  },\r\n  {\r\n    value: 'Vatican',\r\n    timeZone: 'Europe/Vatican'\r\n  },\r\n  {\r\n    value: 'Toronto',\r\n    timeZone: 'America/Toronto'\r\n  },\r\n  {\r\n    value: 'Los Angeles',\r\n    timeZone: 'America/Los_Angeles'\r\n  },\r\n  {\r\n    value: 'Montreal',\r\n    timeZone: 'America/Montreal'\r\n  },\r\n  {\r\n    value: 'London',\r\n    timeZone: 'Europe/London'\r\n  },\r\n  {\r\n    value: 'Kiev',\r\n    timeZone: 'Europe/Kiev'\r\n  },\r\n  {\r\n    value: 'Paris',\r\n    timeZone: 'Europe/Paris'\r\n  },\r\n  {\r\n    value: 'Jamaica',\r\n    timeZone: 'Jamaica'\r\n  },\r\n  {\r\n    value: 'Iceland',\r\n    timeZone: 'Iceland'\r\n  }\r\n];\r\n\r\n\r\nexport default mockData;","import React, { useState } from 'react';\r\nimport mockData from '../mockTimeZones/mockTimeZones';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { IShowSelectedCountry, ISelectorCountryProps } from '../interfaces/interfaces'\r\n\r\nconst SelectorCountry = ({ selectTimeZone }: ISelectorCountryProps) => {\r\n  const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n      formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n      },\r\n      selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n    }),\r\n  );\r\n\r\n  const classes = useStyles();\r\n  const [country, setCountry] = useState<string>('Kiev');\r\n\r\n  let handleChange: IShowSelectedCountry = (event) => {\r\n    setCountry(event.target.value as string);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FormControl className={classes.formControl}>\r\n        <InputLabel id=\"demo-simple-select-label\">Country</InputLabel>\r\n        <Select\r\n          id=\"demo-simple-select\"\r\n          value={country}\r\n          onChange={handleChange}\r\n        >\r\n          {mockData.map((item, index) => <MenuItem key={index} value={item.value} onClick={() => selectTimeZone(item.timeZone)}>\r\n            {item.value}\r\n          </MenuItem>)}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SelectorCountry;","import React from 'react';\nimport { useState } from 'react';\nimport Moment from 'react-moment';\nimport 'moment-timezone';\nimport './App.css';\nimport { Button } from '@material-ui/core';\nimport SelectorCountry from '../SelectorCountry';\nimport { IChangeTimeFormat, ISelectTimeZone } from '../../interfaces/interfaces';\n\nconst App = () => {\n  const timeIn24Format: string = 'HH:mm:ss';\n  const timeIn12Format: string = 'h:mm:ss A';\n\n  const [timeFormat, setTimeFormat] = useState<string>(timeIn12Format);\n  const [timeZoneName, setTimeZoneName] = useState<string>('Europe/Kiev');\n\n  const changeTimeFormat: IChangeTimeFormat = () => {\n    if(timeFormat === timeIn12Format) {\n      setTimeFormat(timeIn24Format);\n    } else {\n      setTimeFormat(timeIn12Format);\n    }\n  };\n\n  let selectTimeZoneName: ISelectTimeZone = (item) => {\n    setTimeZoneName(item);\n  };;\n\n  return (\n    <div>\n      <h3 className='header'>\n        <Moment\n          format={timeFormat}\n          interval={250}\n          tz={timeZoneName}\n        />\n\n      </h3>\n\n      <hr></hr>\n\n      <div className='container'>\n        <Button variant=\"contained\" color=\"primary\" onClick={() => changeTimeFormat()}>Change Time Format</Button>\n\n        <SelectorCountry \n          selectTimeZone={selectTimeZoneName}\n        />\n      </div>\n    </div>\n  )   \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Componenets/App/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}